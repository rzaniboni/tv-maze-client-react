{"version":3,"sources":["App.module.css","components/NoImage.tsx","components/TvMazeResults.tsx","components/TvMazeSearch.tsx","components/TvMazeShowDetails.tsx","App.tsx","hooks/useTvMaze.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","NoImage","className","css","noImage","TvMazeResults","result","itemClick","length","grid","map","series","show","id","image","name","key","gridItem","movie","onClick","src","medium","alt","movieText","TvMazeSearch","search","useState","text","setText","onSubmit","event","preventDefault","type","autoFocus","placeholder","value","onChange","target","TvMazeShowDetails","onClose","App","details","setDetails","setResult","Axios","get","then","res","data","closeModal","useTvMaze","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6IACAA,EAAOC,QAAU,CAAC,KAAO,kBAAkB,SAAW,sBAAsB,MAAQ,mBAAmB,QAAU,qBAAqB,UAAY,yB,yHCErIC,EAAU,kBAAM,yBAAKC,UAAWC,IAAIC,WCkClCC,EA3B4C,SAAC,GAGrD,IAFLC,EAEI,EAFJA,OACAC,EACI,EADJA,UAEA,OACE,oCACGD,EAAOE,OADV,WAEE,yBAAKN,UAAWC,IAAIM,MACjBH,EAAOI,KAAI,SAACC,GAAY,IAAD,EAGlBA,EADFC,KAAQC,EAFY,EAEZA,GAAIC,EAFQ,EAERA,MAAOC,EAFC,EAEDA,KAErB,OACE,yBAAKC,IAAKH,EAAIX,UAAWC,IAAIc,UAC3B,yBAAKf,UAAWC,IAAIe,MAAOC,QAAS,kBAAMZ,EAAUI,KACjDG,EAAQ,yBAAKM,IAAG,OAAEN,QAAF,IAAEA,OAAF,EAAEA,EAAOO,OAAQC,IAAI,KAAQ,kBAAC,EAAD,MAE9C,yBAAKpB,UAAWC,IAAIoB,WAAYR,W,OCIjCS,EAzBmC,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EACxCC,mBAAiB,WADuB,mBACzDC,EADyD,KACnDC,EADmD,KAYhE,OACE,0BAAMC,SANc,SAACC,GACrBA,EAAMC,iBACNN,EAAOE,KAKL,2BACEK,KAAK,OACLC,WAAS,EACTC,YAAY,mBACZC,MAAOR,EACPS,SAhBkB,SAACN,GACvBF,EAAQE,EAAMO,OAAOF,Y,iBCFzB,IAWeG,EAX6C,SAAC,GAGvD,EAFJ1B,KAEK,IADL2B,EACI,EADJA,QAEA,OACE,6BACE,4BAAQpB,QAASoB,GAAjB,WCISC,EAZI,WAAO,IAAD,ECFlB,WAAsB,IAAD,EACId,mBAAsB,MAD1B,mBACnBe,EADmB,KACVC,EADU,OAEEhB,mBAAmB,IAFrB,mBAEnBpB,EAFmB,KAEXqC,EAFW,KAqB1B,MAAO,CACLhC,OAAQL,EACRmB,OAnBoB,SAACE,GACrBiB,IAAMC,IAAN,gDAA6DlB,IAAQmB,MACnE,SAACC,GACCJ,EAAUI,EAAIC,UAiBlBzC,UAZuB,SAACI,GAExB+B,EAAW/B,EAAOC,OAWlB6B,UACAQ,WATiB,WACjBP,EAAW,QDf8CQ,GAAnDvC,EADe,EACfA,OAAQc,EADO,EACPA,OAAQlB,EADD,EACCA,UAAWkC,EADZ,EACYA,QAASQ,EADrB,EACqBA,WAE5C,OACE,6BACE,kBAAC,EAAD,CAAcxB,OAAQA,IACtB,kBAAC,EAAD,CAAenB,OAAQK,EAAQJ,UAAWA,IAC1C,kBAAC,EAAD,CAAmBK,KAAM6B,EAASF,QAASU,MED7BE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAACkB,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.df2a69b6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"App_grid__3DnSg\",\"gridItem\":\"App_gridItem__14nWb\",\"movie\":\"App_movie__2a2Nd\",\"noImage\":\"App_noImage__1q4ri\",\"movieText\":\"App_movieText__ghLo1\"};","import React from 'react';\nimport css from '../App.module.css';\n\nexport const NoImage = () => <div className={css.noImage}></div>;\n","import React from 'react';\nimport css from '../App.module.css';\nimport { Series } from '../model/series';\nimport { NoImage } from './NoImage';\n\nexport interface TVMazeResultsProps {\n  result: Series[];\n  itemClick: (series: Series) => void;\n}\n\nexport const TvMazeResults: React.FC<TVMazeResultsProps> = ({\n  result,\n  itemClick,\n}) => {\n  return (\n    <>\n      {result.length} results\n      <div className={css.grid}>\n        {result.map((series) => {\n          const {\n            show: { id, image, name },\n          } = series;\n          return (\n            <div key={id} className={css.gridItem}>\n              <div className={css.movie} onClick={() => itemClick(series)}>\n                {image ? <img src={image?.medium} alt=\"\" /> : <NoImage />}\n\n                <div className={css.movieText}>{name}</div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default TvMazeResults;\n","import React, { ChangeEvent, useState } from 'react';\n\nexport interface TvMazeSearchProps {\n  search: (text: string) => void;\n}\n\nconst TvMazeSearch: React.FC<TvMazeSearchProps> = ({ search }) => {\n  const [text, setText] = useState<string>('soprano');\n\n  const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\n    setText(event.target.value);\n  };\n\n  const searchHandler = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    search(text);\n  };\n\n  return (\n    <form onSubmit={searchHandler}>\n      <input\n        type=\"text\"\n        autoFocus\n        placeholder=\"Search TV Series\"\n        value={text}\n        onChange={onChangeHandler}\n      />\n    </form>\n  );\n};\n\nexport default TvMazeSearch;\n","import React from 'react';\nimport { Show } from '../model/series';\n\ninterface TvMazeShowDetailsProps {\n  show: Show | null;\n  onClose: () => void;\n}\n\nconst TvMazeShowDetails: React.FC<TvMazeShowDetailsProps> = ({\n  show,\n  onClose,\n}) => {\n  return (\n    <div>\n      <button onClick={onClose}>Close</button>\n    </div>\n  );\n};\n\nexport default TvMazeShowDetails;\n","import React from 'react';\nimport TvMazeResults from './components/TvMazeResults';\nimport TvMazeSearch from './components/TvMazeSearch';\nimport { useTvMaze } from './hooks/useTvMaze';\nimport TvMazeShowDetails from './components/TvMazeShowDetails';\n\nexport const App = () => {\n  const { series, search, itemClick, details, closeModal } = useTvMaze();\n\n  return (\n    <div>\n      <TvMazeSearch search={search} />\n      <TvMazeResults result={series} itemClick={itemClick} />\n      <TvMazeShowDetails show={details} onClose={closeModal} />\n    </div>\n  );\n};\n\nexport default App;\n","import { useState } from 'react';\nimport { Series, Show } from '../model/series';\nimport Axios from 'axios';\n\nexport function useTvMaze() {\n  const [details, setDetails] = useState<Show | null>(null);\n  const [result, setResult] = useState<Series[]>([]);\n\n  const searchHandler = (text: string) => {\n    Axios.get<Series[]>(`https://api.tvmaze.com/search/shows?q=${text}`).then(\n      (res) => {\n        setResult(res.data);\n      }\n    );\n  };\n\n  const itemClickHandler = (series: Series) => {\n    // window.open(series.show.url);\n    setDetails(series.show);\n  };\n\n  const closeModal = () => {\n    setDetails(null);\n  };\n\n  return {\n    series: result,\n    search: searchHandler,\n    itemClick: itemClickHandler,\n    details,\n    closeModal,\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}